
* Straight Package Manager 
** Bootstrapping straight
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
** Install use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (use-package straight
    :custom (straight-use-package-by-default t))
#+END_SRC

* Emacs Startup
  Hide the startup message
#+BEGIN_SRC elisp
(setq inhibit-startup-message t)
#+END_SRC
   
* Backspace Key
  Set ctrl+h as backspace and ctrl+? as emacs-help
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "M-?") 'mark-paragraph)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "C-M-h") 'backward-kill-word)
#+END_SRC

* Minibuffer Completions
  [[https://www.reddit.com/r/emacs/comments/rbr2x5/completions_in_mini_buffer/][Reddit Discusssion]]
  Have tried Helm. Not happy with buffers all over in the completions.
  Will be trying vertico, orderless, emarbark  and marginilia. 
** Helm
  Completions in the minibuffer
#+BEGIN_SRC elisp
  ;; (use-package helm 
  ;;  :straight t
  ;;  :config
  ;;    (helm-mode 1)
  ;;  :bind (("M-x" . helm-M-x)
  ;;  ("C-x r b" . helm-filtered-bookmarks)
  ;;  ("C-x C-f"
    ;; . helm-find-files)))
#+END_SRC
** Vertico
#+BEGIN_SRC elisp
  (use-package vertico
    :straight t
    :init (vertico-mode)
    )
#+END_SRC
** Orderless
#+BEGIN_SRC elisp
  (use-package orderless
    :straight t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion))))
  )
#+END_SRC
** Marginilia
#+BEGIN_SRC elisp
  (use-package marginalia
    :straight t
    :config
    (marginalia-mode)
  )
#+END_SRC
** Embark
#+BEGIN_SRC elisp
  (use-package embark
    :straight t 
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-c b" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none))))
  )

#+END_SRC

* Org Bullets
#+BEGIN_SRC elisp
  (use-package org-bullets
    :straight t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Emacs theme
** Tango-dark theme
   Was not able to clone tango-dark-theme.el from Emacs repo. So created a personal repo, copied the .el file and cloned it.
#+BEGIN_SRC elisp
  ;; (use-package tango-dark-theme
  ;;    :straight (tango-dark-theme
  ;; 	      :host github 
  ;; 	      :repo "ankitf/tango-dark-theme"
  ;; 	      :branch "main")
     ;; :defer t
     ;; :config (load-theme 'tango-dark))

#+END_SRC
** Zenburn
   [[https://github.com/bbatsov/zenburn-emacs][Github]]
   Much better than tango-dark. Low contrast and cyan background is easy on the eye. Love it. :)
#+BEGIN_SRC elisp
  (use-package zenburn-theme
    :straight t
    :config
    (load-theme 'zenburn t))
#+END_SRC

* Aggressive Indent 
  Keeps your code always indented.
  [[https://github.com/Malabarba/aggressive-indent-mode][github]]
#+BEGIN_SRC elisp
  (use-package aggressive-indent
    :straight t
    :config
    (global-aggressive-indent-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  )
#+END_SRC  
* Clipboard Copy/Paste
** Default
   Makes killing/yanking interact with the clipboard
#+BEGIN_SRC elisp
  (setq-default x-select-enable-clipboard t)
#+END_SRC
** Simpleclip  
  Simplified access to sytem clipboard.
#+BEGIN_SRC elisp
  (use-package simpleclip
    :straight t
    :config
    (simpleclip-mode 1)
    :bind
    (("s-c" . simpleclip-copy)
     ("s-v" . simpleclip-paste)))
#+END_SRC

* Emacs Window Visuals
** Disable menu-bar, tool-bar and scroll-bar
#+BEGIN_SRC elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Shrink fringes/borders to 1 pixel   
#+BEGIN_SRC elisp
(fringe-mode 1)
#+END_SRC

* Display time Mode
#+BEGIN_SRC elisp
  (setq display-time-default-load-average nil)
  (display-time-mode t)
#+END_SRC

* Python setup
** Python Virtual environment
   I have dedicated a virtual environment for emacs related python packages.
   Make sure to include the requirement.txt of this env to .emacs.d git repo.
#+BEGIN_SRC elisp
  (use-package pyvenv
    :straight t
    :config
    (pyvenv-activate "~/.virtualenvs/emacs-virtualenv"))
#+END_SRC
** Elpy
#+BEGIN_SRC elisp
  (use-package elpy
    :straight t
    :init
  (elpy-enable))
#+END_SRC   
** Jedi
#+BEGIN_SRC elisp
  (use-package jedi
    :straight t
    :init
    (add-hook 'python-mode-hook #'jedi:setup)
    :config
    (setq jedi:setup-keys t))
   ;; (setq jedi:complete-on-dot t)
#+END_SRC
** py-autopep8
#+BEGIN_SRC elisp
  (use-package py-autopep8
    :straight t
    :init
    (add-hook 'elpy-mode-hook #'py-autopep8-enable-on-save))
#+END_SRC      

* Hideshow - Code Folding
  Change the folding levels in the according to the language. 
#+BEGIN_SRC elisp
  (use-package hideshow
    :straight t
    :init
    (add-hook 'python-mode-hook #'hs-minor-mode)
    :bind (("C--" . "C-u 2 C-c @ C-l")  ;; Fold everything below level 2, very helpful in python class file.
	   ;; ("C--" . 'hs-hide-level)
	   ("C-=" . 'hs-toggle-hiding)))

#+END_SRC   

* Pomodoro Timer
  Productivity timer. Give undivided attention to a specific task for 25 mins. Take a short break after.
  Timer will start in the emacs status bar.
#+BEGIN_SRC elisp
  (use-package pomodoro
    :straight t
    :config
    (pomodoro-add-to-mode-line))
#+END_SRC 

* Ace window - Emacs window switching
#+BEGIN_SRC elisp
  (use-package ace-window
    :straight t
    :bind ("C-x o" . ace-window))
#+END_SRC
  
* Modeline Beautification
** Moodline
   [[https://github.com/jessiehildebrandt/mood-line][github]]
#+BEGIN_SRC elisp
  (use-package mood-line
    :straight t
    :config
    (mood-line-mode))
#+END_SRC 
** Minions
#+BEGIN_SRC elisp
  ;; (use-package minions
    ;; :straight t
    ;; :config
    ;; (minions-mode 1))
#+END_SRC
** Doom modeline
   [[https://github.com/seagle0128/doom-modeline][github]]
#+BEGIN_SRC elisp
  ;; (use-package doom-modeline
  ;;   :straight t
  ;;   :init
  ;;   (doom-modeline-mode 1))
#+END_SRC   
** Telephone line
   [[https://github.com/dbordak/telephone-line][github]]
#+BEGIN_SRC elisp
  ;; (use-package telephone-line
    ;; :straight t
    ;; :init
    ;; (telephone-line-mode 1))
#+END_SRC      
   

* Straight Package Manager 
** Bootstrapping straight
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
** Install use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (use-package straight
    :custom (straight-use-package-by-default t))
#+END_SRC

* Emacs Startup
  Hide the startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

* Backspace Key
Set ctrl+h as backspace and ctrl+? as emacs-help
#+BEGIN_SRC emacs-lisp
(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word.
  With argument, do this that many times."
  (interactive "p")
  (if (use-region-p)
	  (delete-region (region-beginning) (region-end))
    (delete-region (point) (progn (forward-word arg) (point)))))

(defun backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
  With argument, do this that many times."
  (interactive "p")
  (delete-word (- arg)))

(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "M-?") 'mark-paragraph)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-delete-word)

#+END_SRC

* Movement 
  Change forward-word and backword-word to better implementation.
#+begin_src emacs-lisp
  ;; (subword-mode +1)
  ;; ;
										  ; (setq syntax-subword-skip-spaces t)
#+end_src


* Font Size
  The value is in 1/10pt, so 100 will give you 10pt, etc.
#+begin_src emacs-lisp
(set-face-attribute 'default  nil :height 50)
#+end_src
* Minibuffer Completions
[[https://www.reddit.com/r/emacs/comments/rbr2x5/completions_in_mini_buffer/][Reddit Discusssion]]
Have tried Helm. Not happy with buffers all over in the completions.
Will be trying vertico, orderless, emarbark  and marginilia. 
** Helm
Completions in the minibuffer
#+BEGIN_SRC emacs-lisp
;; (use-package helm 
;;  :straight t
;;  :config
;;    (helm-mode 1)
;;  :bind (("M-x" . helm-M-x)
;;  ("C-x r b" . helm-filtered-bookmarks)
;;  ("C-x C-f"
;; . helm-find-files)))
#+END_SRC
** Vertico
Vertical completion UI for minibuffer. Unlike Helm, which opens new buffer for completions.
[[https://github.com/minad/vertico][github]]
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :straight (vertico :files (:defaults "extensions/*")
					 :includes (vertico-directory)) ;; append to this list to use other vertico extenstions.
  :init (vertico-mode)
  )
#+END_SRC
** Vertico Directory
Ido like directory navigation in vertico.
#+BEGIN_SRC emacs-lisp
(use-package vertico-directory
  :straight nil
  )
#+END_SRC
** Orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :straight t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless)
		completion-category-defaults nil
		completion-category-overrides '((file (styles partial-completion))))
  )
#+END_SRC
** Marginilia
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :straight t
  :config
  (marginalia-mode)
  )
#+END_SRC
** Embark
#+BEGIN_SRC emacs-lisp
(use-package embark
  :straight t 
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-c b" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
			   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
				 nil
				 (window-parameters (mode-line-format . none))))
  )

#+END_SRC
** SaveHist
Persists history over emacs restarts. Vertico sorts by history position.
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :straight t
  :init
  (savehist-mode)
  )
#+END_SRC
** Ido mode
Nothing better than ido for suggestion in find-file and buffers.
#+BEGIN_SRC emacs-lisp
;; (use-package ido
;;   :straight t
;;   :config
;;   (setq ido-enable-flex-matching t)
;;   (ido-mode t)
;;   )
#+END_SRC
** Ido-vertical mode
Nothing better than ido for suggestion in find-file and buffers.
#+BEGIN_SRC emacs-lisp
;; (use-package ido-vertical-mode
;;   :straight t
;;   :init
;;   (ido-vertical-mode t)
;;   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
;;   )

#+END_SRC

* Org mode
  emacs version: 27.2
  org-mode version: 9.4.4 (inbuilt)
#+BEGIN_SRC emacs-lisp
  (use-package org
	:straight (:type built-in)            ;; using inbuilt org.
	;;:straight t    ;; loading external org causes some issues in the org-capture
	:config
	(setq org-src-tab-acts-natively t) ;; indent code in org-babel
  	(setq org-startup-folded t) ;; fold org files on startup.
	:bind (:map org-mode-map
				("M-h" . nil) ;; Using this for backward-delete-word
				)
	)

#+END_SRC
* Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :straight t
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Emacs themes
** Tango-dark theme
Was not able to clone tango-dark-theme.el from Emacs repo. So created a personal repo, copied the .el file and cloned it.
#+BEGIN_SRC emacs-lisp
;; (use-package tango-dark-theme
;;    :straight (tango-dark-theme
;; 	      :host github 
;; 	      :repo "ankitf/tango-dark-theme"
;; 	      :branch "main")
;; :defer t
;; :config (load-theme 'tango-dark))

#+END_SRC
** Zenburn
[[https://github.com/bbatsov/zenburn-emacs][Github]]
Much better than tango-dark. Low contrast and cyan background is easy on the eye. Love it. :)
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
	:straight t
	:config
	(load-theme 'zenburn t))
#+END_SRC
** Nord
[[https://www.nordtheme.com/docs/ports/emacs][website]]
#+BEGIN_SRC emacs-lisp
;; (use-package nord-theme
;;   :straight t
;;   :config
;;   (load-theme 'nord t))
#+END_SRC
** Manoj dark
[[https://www.nordtheme.com/docs/ports/emacs][website]]
#+BEGIN_SRC emacs-lisp
  ;; (load-theme 'manoj-dark)
#+END_SRC
** Doom themes
   [[https://github.com/doomemacs/themes][github]]
#+begin_src emacs-lisp
  ;;  (use-package doom-themes
  ;; 	 :straight (doom-themes :host github
  ;; 						:repo "doomemacs/themes"
  ;; 						:branch "master")
  ;; 	 :config 
  ;; 	 (setq doom-themes-enable-bold t	 ; if nil, bold is universally disabled ;
  ;; 		   doom-themes-enable-italic t)
  ;; 	 ;; (load-theme 'doom-one t)
  ;; 	 (load-theme 'doom-zenburn t)
  ;; 	 ;; corrects (and improved) org-mode's native fontification
  ;; 	 (doom-themes-org-config)
  ;; )
#+end_src
* Aggressive Indent 
Keeps your code always indented.
[[https://github.com/Malabarba/aggressive-indent-mode][github]]
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
	:straight t
	:config
	(global-aggressive-indent-mode 1)
	(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
   )
#+END_SRC  
* Clipboard Copy/Paste
** Default
Makes killing/yanking interact with the clipboard
#+BEGIN_SRC emacs-lisp
  (setq-default x-select-enable-clipboard t)
  (setq select-enable-primary nil)
  (setq select-enable-clipboard t)
  (delete-selection-mode)
#+END_SRC
** Simpleclip  
Simplified access to sytem clipboard.
#+BEGIN_SRC emacs-lisp
  ;; (use-package simpleclip
  ;;   :straight t
  ;;   :config
  ;;   (simpleclip-mode 1)
  ;;   :bind
  ;;   (("s-c" . simpleclip-copy)
  ;;    ("s-v" . simpleclip-paste)))
#+END_SRC

* Emacs Window Visuals
** Disable menu-bar, tool-bar and scroll-bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
** Shrink fringes/borders to 1 pixel   
#+BEGIN_SRC emacs-lisp
(fringe-mode 1)
#+END_SRC

* Display time Mode
#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
  (display-time-mode t)
#+END_SRC

* Hideshow - Code Folding
  Change the folding levels in the according to the language. 
#+BEGIN_SRC emacs-lisp
	(use-package hideshow
	  :straight t
	  :init
	  (add-hook 'python-mode-hook #'hs-minor-mode)

	  :config 
	  (defun toggle-fold ()
		(interactive)
		(save-excursion
		  (end-of-line)
		  (hs-toggle-hiding)
  ))

	  :bind (;;("C--" . '(kbd "C-u 2 C-c @ C-l"))  ;; Fold everything below level 2, very helpful in python class file.
		 ("C--" . 'hs-hide-level)
		 ("C-=" . 'hs-toggle-hiding)
		 ;;("C-=" . 'toggle-fold)
		 )
	  )



#+END_SRC   

* Pomodoro Timer
  Productivity timer. Give undivided attention to a specific task for 25 mins. Take a short break after.
  Timer will start in the emacs status bar.
  [[https://reposhub.com/python/miscellaneous/SqrtMinusOne-pomm-el.html][Link]]
#+BEGIN_SRC emacs-lisp
(use-package pomm
  :straight (:host github :repo "SqrtMinusOne/pomm.el")
  :commands (pomm)
  :config (pomm-mode-line-mode))
#+END_SRC 

* Ace window - Emacs window switching
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :straight t
    :bind ("C-x o" . ace-window))
#+END_SRC
  
* Modeline Beautification
** Moodline
   [[https://github.com/jessiehildebrandt/mood-line][github]]
#+BEGIN_SRC emacs-lisp
  (use-package mood-line
    :straight t
    :config
    (mood-line-mode))
#+END_SRC 
** Minions
#+BEGIN_SRC emacs-lisp
  ;; (use-package minions
    ;; :straight t
    ;; :config
    ;; (minions-mode 1))
#+END_SRC
** Doom modeline
   [[https://github.com/seagle0128/doom-modeline][github]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package doom-modeline
  ;;   :straight t
  ;;   :init
  ;;   (doom-modeline-mode 1))
#+END_SRC   
** Telephone line
   [[https://github.com/dbordak/telephone-line][github]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package telephone-line
    ;; :straight t
    ;; :init
    ;; (telephone-line-mode 1))
#+END_SRC      
   
* Magit - Git Interface of Emacs
  Magit is *magic*. 
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    )
#+END_SRC
* Silver Searcher Ag 
  Mostly suggested by projectile

#+BEGIN_SRC emacs-lisp
(use-package ag
    :straight t
    )
#+END_SRC(use
  
* Projectile - Project Interaction Library
  Prequisite - Install "the_silver_searcher_ag" and "fd" on arch linux. Install ag in emacs.
#+BEGIN_SRC emacs-lisp
   (use-package projectile
     :straight t
     :config
     (projectile-mode +1)
     (projectile-global-mode +1)
     :bind-keymap ("C-c p" . projectile-command-map)
     )
#+END_SRC 
* Github Markdown
  Preview github markdown to edit readme.rd files.
#+BEGIN_SRC emacs-lisp
  (use-package grip-mode
    :straight t
    :bind (("C-c g" . grip-mode))
  )
#+END_SRC
* Tab width
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC
* Terminal window 
  Open a terminal window
#+BEGIN_SRC emacs-lisp
  (defun terminal-window()
	(interactive)
	(ansi-term (executable-find "bash")))

  (global-set-key (kbd "C-x t") 'terminal-window) 

#+END_SRC

* Python setup
** Python Virtual environment
   I have dedicated a virtual environment for emacs related python packages.
   Make sure to include the requirement.txt of this env to .emacs.d git repo.
#+BEGIN_SRC emacs-lisp
  ;; (use-package pyvenv
  ;;   :straight t
  ;;   :config
  ;;   (pyvenv-activate "~/.virtualenvs/emacs-virtualenv"))
#+END_SRC
** Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
	:straight t
	:init (advice-add 'python-mode :before 'elpy-enable)
	:hook (elpy-mode . (lambda () (add-hook 'before-save-hook 'elpy-format-code)))
	:config
	(setq elpy-rpc-virtualenv-path "~/.virtualenvs/emacs_virtualenv")
	(elpy-enable)
)
#+END_SRC   
** Jedi
#+BEGIN_SRC emacs-lisp
  ;; (use-package jedi
  ;;   :straight t
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'jedi:setup)
  ;;   :config
  ;;   (setq jedi:setup-keys t))
#+END_SRC
** py-autopep8
#+BEGIN_SRC emacs-lisp
  ;; (use-package py-autopep8
  ;;   :straight t
  ;;   :init
	;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC      
** python-black
#+BEGIN_SRC emacs-lisp
  ;; (use-package python-black
  ;; :straight t
  ;; :demand t
  ;; :after python
  ;; :hook (python-mode . python-black-on-save-mode-enable-dwim))

#+END_SRC      
** sphinx docs
#+BEGIN_SRC emacs-lisp
   (use-package sphinx-doc
	   :straight (sphinx-doc :host github
							 :repo "naiquevin/sphinx-doc.el"
							 :branch "master")
	  :config (add-hook 'python-mode-hook (lambda ()
	  (sphinx-doc-mode t)))
	  )
  (message "sphinx loaded")
#+END_SRC

* Emacs Ipython Notebook EIN
  Jypyter notebook client for emacs. 
#+begin_src emacs-lisp
  (use-package ein
	:straight t
	:config 
	(setq ein:output-area-inlined-images t)
	)
  ;; load org-babel for ein
  (org-babel-do-load-languages 'org-babel-load-languages
							   (append org-babel-load-languages
									   '((python . t)
										 (ein . t))))


#+end_src
* Org roam
  Zettelkasten replica in emacs
  [[https://github.com/org-roam/org-roam][github]] [[https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/][lucidmanager_tutorial]]
  setup org roam repo as a submodule in .emacs.d repo for sync. 
#+begin_src emacs-lisp
  (use-package org-roam
	:straight t
	:custom
	(org-roam-directory (file-truename "/home/ankit/ankit/emacs/roam"))
	:bind (("C-c n l" . org-roam-buffer-toggle)
		   ("C-c n f" . org-roam-node-find)
		   ("C-c n g" . org-roam-graph)
		   ("C-c n i" . org-roam-node-insert)
		   ("C-c n c" . org-roam-capture)
		   ;; Dailies
		   ("C-c n d" . org-roam-dailies-capture-today))
	:config
	;; If you're using a vertical completion framework, you might want a more informative completion interface
	(org-roam-db-autosync-mode)
	;; If using org-roam-protocol
	;; (require 'org-roam-protocol)
	)
#+end_src

* Treemacs
  [[https://github.com/Alexander-Miller/treemacs][github]]
  Emacs as an IDE. Easy project navigation, better window views. Lets see. 
#+begin_src emacs-lisp
  (use-package treemacs 
	:straight t
	:ensure t
	:defer t
	:init
	(with-eval-after-load  'winum
	  (define-key winun-keymap (kbd "M-o") #'treemacs-select-window))
	:config (progn
			  (setq treemacs-expand-after-init  t)
			  (treemacs-follow-mode t)
			  (treemacs-fringe-indicator-mode 'always)
			  (treemacs-filewatch-mode t)
			  (pcase (cons (not (null (executable-find "git")))
				 (not (null treemacs-python-executable)))
				(`(t . t)
				 (treemacs-git-mode 'deferred))
				(`(t . _)
				 (treemacs-git-mode 'simple)))
			  (treemacs-hide-gitignored-files-mode nil)
			  )
	:bind 
	(:map global-map
						("M-o"     . treemacs-select-window)
						("C-c t t" . treemacs))
	)
#+end_src
** Treemacs Projectile
   #+begin_src emacs-lisp
	 ;; (use-package treemacs-projectile
	 ;; 	   :after (treemacs projectile)
	 ;; )
   #+end_src
** Treemacs Magit
   #+begin_src emacs-lisp
	 (use-package treemacs-magit
	   :after (treemacs magit)
	   :ensure t
	   )
   #+end_src
** Treemacs icons dired
#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

#+end_src
  
* GTD 
  Getting things done 
  inbox - capture tasks, while reviewing, refile the task to corresponding file, project
  personal - personal projects tracking
  vyn - projects related to vyntelligence, humanlearning pvt ltd
  tickler - add task with timestamp to get reminded at the right moment, it would
  be easier if able to integrate google calender with this
#+begin_src emacs-lisp
(setq org-agenda-files '("~/ankit/emacs/gtd/inbox.org"
                         "~/ankit/emacs/gtd/personal.org"
                         "~/ankit/emacs/gtd/vyn.org"
                         "~/ankit/emacs/gtd/tickler.org"))
(setq org-todo-keywords '((sequence "TODO(t)" "WIP(w)" "|" "DONE(d)" "CANCELLED" "WAITING")))

(global-set-key (kbd "C-c c") 'org-capture)
(setq org-capture-templates
      '(("t" "Todo [inbox]" entry (file+headline "~/ankit/emacs/gtd/inbox.org" "Tasks")
         "* TODO %?\n  %i\n")
        ("T" "Tickler" entry
         (file+headline "~/ankit/emacs/gtd/tickler.org" "Tickler")
         "* %i% \n %U")))

(setq org-refile-targets '(("~/ankit/emacs/gtd/personal.org" :maxlevel . 1)
                           ("~/ankit/emacs/gtd/vyn.org" :level . 1)
                          ("~/ankit/emacs/gtd/tickler.org" :maxlevel . 2)))

#+end_src
* Markdown mode
  Major mode for editing markdown formatted text.
#+begin_src emacs-lisp
  (use-package markdown-mode
	:straight t
	:mode ("README\\.md\\'" . gfm-mode)
	:init (setq markdown-command "multimarkdown"))
  ;; grip to preview in github on localhost.



#+end_src
